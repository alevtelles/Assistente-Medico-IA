from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA
from langchain_groq import ChatGroq
import os
from dotenv import load_dotenv

load_dotenv()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")

def get_llm_chain(retriever):
    llm=ChatGroq(
        groq_api_key=GROQ_API_KEY,
        model_name='llama3-70b-8192'
    )

    prompt = PromptTemplate(
        input_variables=["context", "question"],
        template=""""

        Voc√™ √© **MediBot**, uma IA treinada para ajudar usu√°rios a entender documentos m√©dicos e quest√µes relacionadas √† sa√∫de.

        Seu trabalho √© fornecer respostas claras, precisas e √∫teis **com base apenas no contexto fornecido**.

        
        ---

        üîç **Context**:
        {context}

        üôãüèΩ‚Äç‚ôÇÔ∏è **Pergunta do Usu√°rio**:
        {question}

        üí¨ **Respostas**
        IMPORTANTE:
        - Sempre responda em **portugu√™s do Brasil**.
        - Responda de forma calma, factual e respeitosa.
        - Use explica√ß√µes simples sempre que necess√°rio.
        - Se o contexto n√£o contiver a resposta, diga: "Desculpe, n√£o encontrei informa√ß√µes relevantes nos documentos fornecidos."
        - N√ÉO invente fatos.
        - N√ÉO d√™ conselhos m√©dicos ou diagn√≥sticos.
        
        """,
    )

    return RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=retriever,
        chain_type_kwargs={"prompt": prompt},
        return_source_documents=True,
    )